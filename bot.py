import datetime
import telebot
import config
from bot_db import BotDB, DELTA_UTC

bot_db = BotDB('database.db')
bot = telebot.TeleBot(config.TOKEN)


@bot.message_handler(commands=['start'])
def welcome(message):
    """A function that send a user a greet message and add him to database

    :param message: Message
    :return: None
    """
    if not bot_db.is_user_in_db(message.from_user.id):
        bot_db.add_user(message.from_user.id)
    sticker = open('hello-sticker.tgs', 'rb')
    bot.send_sticker(message.chat.id, sticker)
    bot.send_message(message.chat.id, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - {1.first_name}, '
                                      '–ø–æ–º–æ–≥—É —Ç–µ–±–µ —Ä–∞—Å–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –∏ –Ω–µ –∑–∞–±—ã—Ç—å –Ω–∏—á–µ–≥–æ –≤–∞–∂–Ω–æ–≥–æ. –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ '
                                      '—è –º–æ–≥—É - –ø–∏—à–∏ /help.'.
                     format(message.from_user, bot.get_me()))


@bot.message_handler(commands=['record_event'])
def record_event(message):
    """A function that record event after user's reply

    :param message: Message
    :return: None
    """
    hold_message = bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å, –∏ –µ–≥–æ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è '
                                                     '–≤ —Ñ–æ—Ä–º–∞—Ç–µ: yyyy mm dd hh mm')
    bot.register_next_step_handler(hold_message, add_event_with_feedback)


def add_event_with_feedback(message):
    """A function that add event with extra message from bot

    :param message: Message
    :return: None
    """
    bot_db.add_event(message)
    bot.send_message(message.chat.id, '–û—Ç–ª–∏—á–Ω–æ, —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ!')


@bot.message_handler(commands=['today_events'])
def show_events(message):
    """A function that show to user his events within this day with extra messages

    :param message: Message
    :return: None
    """
    records = bot_db.get_events(message.from_user.id, 'day')
    if len(records):
        answer = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è –∑–∞ –¥–µ–Ω—å \n'
        for r in records:
            answer += '–°–æ–±—ã—Ç–∏–µ: ' + r[2] + ', '
            answer += '–í—Ä–µ–º—è: ' + str(datetime.datetime.fromisoformat(r[3]) + DELTA_UTC) + '\n'
        bot.send_message(message.chat.id, answer)
    else:
        bot.send_message(message.chat.id, '–ï—â—ë –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π. –î–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–ø–∏—à–µ–º?')


@bot.message_handler(commands=['month_events'])
def show_events(message):
    """A function that show to user his events within this month with extra messages

    :param message: Message
    :return: None
    """
    records = bot_db.get_events(message.from_user.id, 'month')
    if len(records):
        answer = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è –∑–∞ –º–µ—Å—è—Ü \n'
        for r in records:
            answer += '–°–æ–±—ã—Ç–∏–µ: ' + r[2] + ', '
            answer += '–í—Ä–µ–º—è: ' + str(datetime.datetime.fromisoformat(r[3]) + DELTA_UTC) + '\n'
        bot.send_message(message.chat.id, answer)
    else:
        bot.send_message(message.chat.id, '–ï—â—ë –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π. –î–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–ø–∏—à–µ–º?')


@bot.message_handler(commands=['all_events'])
def show_events(message):
    """A function that show to user all his events with extra messages

    :param message: Message
    :return: None
    """
    records = bot_db.get_events(message.from_user.id, 'all')
    if len(records):
        answer = '–í—Å–µ —Å–æ–±—ã—Ç–∏—è \n'
        for r in records:
            answer += '–°–æ–±—ã—Ç–∏–µ: ' + r[2] + ', '
            answer += '–í—Ä–µ–º—è: ' + str(datetime.datetime.fromisoformat(r[3]) + DELTA_UTC) + '\n'
        bot.send_message(message.chat.id, answer)
    else:
        bot.send_message(message.chat.id, '–ï—â—ë –Ω–µ—Ç —Å–æ–±—ã—Ç–∏–π. –î–∞–≤–∞–π —á—Ç–æ-–Ω–∏–±—É–¥—å –∑–∞–ø–∏—à–µ–º?')


@bot.message_handler(commands=['help'])
def help(message):
    """A function that gives a user list of his possible actions in a dialogue with this bot

    :param message: Message
    :return: None
    """
    bot.send_message(message.chat.id, '–î–∞–≤–∞–π —è —Ä–∞—Å—Å–∫–∞–∂—É —Ç–µ–±–µ, —á—Ç–æ —è –º–æ–≥—Éüòä\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ç—ã –Ω–∞–ø–∏—à–µ—à—å –º–Ω–µ /start - —è '
                                      '–∑–∞–ø–æ–º–Ω—é —Ç–µ–±—è, –∏ —Å–º–æ–≥—É –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–∞–∫–∂–µ —Ç–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è.\n–ü–∏—à–∏ /record_event —á—Ç–æ–±—ã '
                                      '–∑–∞–ø–∏—Å–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ.\n –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–≤–æ–∏ —Å–æ–±—ã—Ç–∏—è –∑–∞ –¥–µ–Ω—å - '
                                      '–ø–∏—à–∏ /today_events, –∑–∞ –º–µ—Å—è—Ü - /month_events, –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è - /all_events.\n '
                                      '–ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—à—å, –∫–∞–∫ –º–Ω–µ –Ω–∞–ø–∏—Å–∞—Ç—å - –Ω–∞–±–µ—Ä–∏ /help –∏ —É–≤–∏–¥–∏—à—å –≤—Å–µ –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã.')


@bot.message_handler(content_types=['text'])
def answer(message):
    """A function that gives to user a reply to messages that bot cannot recognize

    :param message: Message
    :return: None
    """
    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é')
    sticker = open('sorry_sticker.tgs', 'rb')
    bot.send_sticker(message.chat.id, sticker)


bot.polling(none_stop=True)
